import {intercept} from '@loopback/core';
import {
  Count,
  CountSchema,
  Filter,
  FilterExcludingWhere,
  repository,
} from '@loopback/repository';
import {
  get,
  getModelSchemaRef,
  HttpErrors,
  param,
  patch,
  post,
  requestBody,
  response,
} from '@loopback/rest';
import {BcryptHasher} from '../services/authentication/hash.password.service';
import {ActivityLogType, FriendStatusType} from '../enums';
import {DeletedDocument, PaginationInterceptor} from '../interceptors';
import {Friend, User} from '../models';
import {
  ActivityLogRepository,
  FriendRepository,
  UserRepository,
} from '../repositories';
// import {authenticate} from '@loopback/authentication';

// @authenticate("jwt")
export class UserController {
  constructor(
    @repository(UserRepository)
    protected userRepository: UserRepository,
    @repository(ActivityLogRepository)
    protected activityLogRepository: ActivityLogRepository,
    @repository(FriendRepository)
    protected friendRepository: FriendRepository,
  ) {}

  @post('/users')
  @response(200, {
    description: 'User model instance',
    content: {
      'application/json': {
        schema: getModelSchemaRef(User),
      },
    },
  })
  async create(
    @requestBody({
      content: {
        'application/json': {
          schema: getModelSchemaRef(User, {
            title: 'NewUser',
            exclude: [
              'profilePictureURL',
              'bannerImageUrl',
              'fcmTokens',
              'onTimeline',
              'createdAt',
              'updatedAt',
              'deletedAt',
              'autoGeneratedPassword',
            ],
          }),
        },
      },
    })
    user: User,
  ): Promise<User> {
    //TODO: override the default create() method and move password auto-generation there
    //auto-generate a password by hashing the user's id
    const hasher = new BcryptHasher();
    user.password = await hasher.hashPassword(user.id);
    return this.userRepository.create(user);
  }

  @intercept(PaginationInterceptor.BINDING_KEY)
  @get('/users')
  @response(200, {
    description: 'Array of User model instances',
    content: {
      'application/json': {
        schema: {
          type: 'array',
          items: getModelSchemaRef(User, {includeRelations: true}),
        },
      },
    },
  })
  async find(
    @param.filter(User, {exclude: ['limit', 'skip', 'offset']})
    filter?: Filter<User>,
  ): Promise<User[]> {
    return this.userRepository.find(filter);
  }

  @intercept(DeletedDocument.BINDING_KEY)
  @get('/users/{id}')
  @response(200, {
    description: 'User model instance',
    content: {
      'application/json': {
        //TODO: hide password from response
        schema: getModelSchemaRef(User, {includeRelations: true}),
      },
    },
  })
  async findById(
    @param.path.string('id') id: string,
    @param.filter(User, {exclude: 'where'}) filter?: FilterExcludingWhere<User>,
  ): Promise<User> {
    return this.userRepository.findById(id, filter);
  }

  @patch('/users/{id}')
  @response(204, {
    description: 'User PATCH success',
  })
  async updateById(
    @param.path.string('id') id: string,
    @requestBody({
      content: {
        'application/json': {
          schema: getModelSchemaRef(User, {
            partial: true,
            exclude: ['id', 'defaultCurrency', 'onTimeline', 'deletedAt'],
          }),
        },
      },
    })
    user: Partial<User>,
  ): Promise<void> {
    if (user.username) {
      this.validateUsername(user.username);

      const {count} = await this.activityLogRepository.count({
        userId: id,
        type: ActivityLogType.USERNAME,
      });

      if (count >= 1)
        throw new HttpErrors.UnprocessableEntity(
          'You can only updated username once',
        );

      await this.activityLogRepository.create({
        userId: id,
        type: ActivityLogType.USERNAME,
        message: 'You updated your username',
      });
    }

    await this.userRepository.updateById(id, user);
    await this.activityLogRepository.create({
      userId: id,
      type: ActivityLogType.PROFILE,
      message: 'You updated your profile',
    });
  }

  @post('/users/{id}/skip-username')
  @response(200, {
    description: 'Skip username success',
  })
  async skipUsername(@param.path.string('id') id: string): Promise<void> {
    const found = await this.userRepository.activityLogs(id).find({
      where: {
        type: ActivityLogType.SKIP,
      },
    });

    if (found.length >= 1) {
      throw new HttpErrors.UnprocessableEntity(
        'You have already skip updating username',
      );
    }

    await this.userRepository.activityLogs(id).create({
      type: ActivityLogType.SKIP,
      message: 'You skipped updating username',
      userId: id,
    });

    return;
  }

  @get('/users/{id}/count-mutual/userId')
  @response(200, {
    description: 'Count mutual friends',
    content: {
      'application/json': {
        schema: CountSchema,
      },
    },
  })
  async countMutual(
    @param.path.string('id') id: string,
    @param.path.string('userId') userId: string,
  ): Promise<Count> {
    /* eslint-disable  @typescript-eslint/no-explicit-any */
    const collection = (
      this.friendRepository.dataSource.connector as any
    ).collection(Friend.modelName);

    const countMutual = await collection
      .aggregate([
        {
          $match: {
            $or: [
              {
                requestorId: id,
                status: FriendStatusType.APPROVED,
              },
              {
                requestorId: userId,
                status: FriendStatusType.APPROVED,
              },
            ],
          },
        },
        {$group: {_id: '$requesteeId', count: {$sum: 1}}},
        {$match: {count: 2}},
        {$group: {_id: null, count: {$sum: 1}}},
        {$project: {_id: 0}},
      ])
      .get();

    if (countMutual.length === 0) return {count: 0};
    return countMutual[0];
  }

  validateUsername(username: string): void {
    if (
      username[username.length - 1] === '.' ||
      username[username.length - 1] === '_'
    ) {
      throw new HttpErrors.UnprocessableEntity(
        'Last character must be an ascii letter (a-z) or number (0-9)',
      );
    }

    if (username[0] === '.' || username[0] === '_') {
      throw new HttpErrors.UnprocessableEntity(
        'Character must be start from an ascii letter (a-z) or number (0-9)',
      );
    }

    if (username.includes('.') && username.includes('_')) {
      throw new HttpErrors.UnprocessableEntity(
        'Only allowed ascii letter (a-z), number (0-9), and periods(.)/underscore(_)',
      );
    }

    if (!username.match('^[a-z0-9._]+$')) {
      throw new HttpErrors.UnprocessableEntity(
        'Only allowed ascii letter (a-z), number (0-9), and periods(.)/underscore(_)',
      );
    }
  }
}
