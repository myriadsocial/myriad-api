name: Deployer

on:
  release:
    types:
      - published
  workflow_run:
    branches:
      - main
    workflows:
      - 'Builder'
    types:
      - completed

concurrency:
  group: deployer

jobs:
  compute-build-info:
    if: ${{ github.event.workflow_run.conclusion == 'success' }} || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    outputs:
      sha_short: ${{ steps.build-info.outputs.sha_short }}
      date: ${{ steps.build-info.outputs.date }}
      latest_tag: ${{ steps.build-info.outputs.latest_tag }}
      package_version: ${{ steps.build-info.outputs.package_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Compute build info
        id: build-info
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
          echo "::set-output name=date::$(date +'%Y%m%d')"

          version=${GITHUB_REF#refs/*/}
          echo $version
          echo "::set-output name=latest_tag::$version"

          package_version=$(cat ./package.json | grep version | head -1 | awk -F: '{ print $2 }' | sed 's/[",]//g' | tr -d '[[:space:]]')
          echo $package_version
          echo "::set-output name=package_version::$package_version"

  deploy-dev:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-20.04
    needs:
      - compute-build-info
    env:
      DEPLOY: ${{ secrets.DEV_DEPLOY }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout code
        if: "${{ env.DEPLOY == 'true' }}"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Authenticate to Google Cloud
        if: "${{ env.DEPLOY == 'true' }}"
        id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: ${{ secrets.DEV_GOOGLE_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.DEV_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ secrets.DEV_GCP_PROJECT_ID }}
      - name: Set up Cloud SDK
        if: "${{ env.DEPLOY == 'true' }}"
        uses: google-github-actions/setup-gcloud@v0
      - name: Get secrets
        if: "${{ env.DEPLOY == 'true' }}"
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            SSH_HOST:${{ secrets.DEV_GCP_PROJECT_ID }}/SSH_HOST
            SSH_PORT:${{ secrets.DEV_GCP_PROJECT_ID }}/SSH_PORT
            SSH_USERNAME:${{ secrets.DEV_GCP_PROJECT_ID }}/SSH_USERNAME
            SSH_KEY:${{ secrets.DEV_GCP_PROJECT_ID }}/SSH_KEY
            SERVER_ID:${{ secrets.DEV_GCP_PROJECT_ID }}/SERVER_ID
            OFFICIAL_ACCOUNT_PUBLIC_KEY:${{ secrets.DEV_GCP_PROJECT_ID }}/OFFICIAL_ACCOUNT_PUBLIC_KEY
            ADMIN_MNEMONIC:${{ secrets.DEV_GCP_PROJECT_ID }}/ADMIN_MNEMONIC
            FAUCET_MNEMONIC:${{ secrets.DEV_GCP_PROJECT_ID }}/FAUCET_MNEMONIC
            FAUCET_AMOUNT:${{ secrets.DEV_GCP_PROJECT_ID }}/FAUCET_AMOUNT
            JWT_TOKEN_SECRET_KEY:${{ secrets.DEV_GCP_PROJECT_ID }}/JWT_TOKEN_SECRET_KEY
            JWT_TOKEN_EXPIRES_IN:${{ secrets.DEV_GCP_PROJECT_ID }}/JWT_TOKEN_EXPIRES_IN
            JWT_REFRESH_TOKEN_SECRET_KEY:${{ secrets.DEV_GCP_PROJECT_ID }}/JWT_REFRESH_TOKEN_SECRET_KEY
            JWT_REFRESH_TOKEN_EXPIRES_IN:${{ secrets.DEV_GCP_PROJECT_ID }}/JWT_REFRESH_TOKEN_EXPIRES_IN
            MONGO_PROTOCOL:${{ secrets.DEV_GCP_PROJECT_ID }}/MONGO_PROTOCOL
            MONGO_HOST:${{ secrets.DEV_GCP_PROJECT_ID }}/MONGO_HOST
            MONGO_PORT:${{ secrets.DEV_GCP_PROJECT_ID }}/MONGO_PORT
            MONGO_USER_API:${{ secrets.DEV_GCP_PROJECT_ID }}/MONGO_USER_API
            MONGO_PASSWORD_API:${{ secrets.DEV_GCP_PROJECT_ID }}/MONGO_PASSWORD_API
            MONGO_DB:${{ secrets.DEV_GCP_PROJECT_ID }}/MONGO_DB
            MONGO_URL:${{ secrets.DEV_GCP_PROJECT_ID }}/MONGO_URL
            REDIS_CONNECTOR:${{ secrets.DEV_GCP_PROJECT_ID }}/REDIS_CONNECTOR
            REDIS_HOST:${{ secrets.DEV_GCP_PROJECT_ID }}/REDIS_HOST
            REDIS_PORT:${{ secrets.DEV_GCP_PROJECT_ID }}/REDIS_PORT
            REDIS_PASSWORD:${{ secrets.DEV_GCP_PROJECT_ID }}/REDIS_PASSWORD
            FIREBASE_SERVICE_ACCOUNT_BASE64:${{ secrets.DEV_GCP_PROJECT_ID }}/FIREBASE_SERVICE_ACCOUNT_BASE64
            FIREBASE_STORAGE_BUCKET:${{ secrets.DEV_GCP_PROJECT_ID }}/FIREBASE_STORAGE_BUCKET
            API_SENTRY_DSN:${{ secrets.DEV_GCP_PROJECT_ID }}/API_SENTRY_DSN
            TWITTER_API_KEY:${{ secrets.DEV_GCP_PROJECT_ID }}/TWITTER_API_KEY
            COIN_MARKET_CAP_API_KEY:${{ secrets.DEV_GCP_PROJECT_ID }}/COIN_MARKET_CAP_API_KEY
            API_DNS:${{ secrets.DEV_GCP_PROJECT_ID }}/API_DNS
      - name: Deploy
        if: "${{ env.DEPLOY == 'true' }}"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.secrets.outputs.SSH_HOST }}
          port: ${{ steps.secrets.outputs.SSH_PORT }}
          username: ${{ steps.secrets.outputs.SSH_USERNAME }}
          key: ${{ steps.secrets.outputs.SSH_KEY }}
          script: |
            ./connect.sh
            helm repo add myriadsocial https://charts.myriad.social
            helm repo update
            helm upgrade myriad-api myriadsocial/myriad-api \
              --install \
              --set-string image.tag=${{ needs.compute-build-info.outputs.sha_short }} \
              --set-string config.serverId=${{ steps.secrets.outputs.SERVER_ID }} \
              --set-string config.officialAccountPublicKey=${{ steps.secrets.outputs.OFFICIAL_ACCOUNT_PUBLIC_KEY }} \
              --set-string config.adminMnemonic="${{ steps.secrets.outputs.ADMIN_MNEMONIC }}" \
              --set-string config.faucetMnemonic="${{ steps.secrets.outputs.FAUCET_MNEMONIC }}" \
              --set config.faucetAmount=${{ steps.secrets.outputs.FAUCET_AMOUNT }} \
              --set-string config.jwt.tokenSecretKey=${{ steps.secrets.outputs.JWT_TOKEN_SECRET_KEY }} \
              --set config.jwt.tokenExpireIn=${{ steps.secrets.outputs.JWT_TOKEN_EXPIRES_IN }} \
              --set-string config.jwt.refreshTokenSecretKey=${{ steps.secrets.outputs.JWT_REFRESH_TOKEN_SECRET_KEY }} \
              --set config.jwt.refreshTokenExpireIn=${{ steps.secrets.outputs.JWT_REFRESH_TOKEN_EXPIRES_IN }} \
              --set-string config.mongo.protocol=${{ steps.secrets.outputs.MONGO_PROTOCOL }} \
              --set-string config.mongo.host=${{ steps.secrets.outputs.MONGO_HOST }} \
              --set config.mongo.port=${{ steps.secrets.outputs.MONGO_PORT }} \
              --set-string config.mongo.user=${{ steps.secrets.outputs.MONGO_USER_API }} \
              --set-string config.mongo.password=${{ steps.secrets.outputs.MONGO_PASSWORD_API }} \
              --set-string config.mongo.database=${{ steps.secrets.outputs.MONGO_DB }} \
              --set-string config.mongo.url="${{ steps.secrets.outputs.MONGO_URL }}" \
              --set-string config.redis.connector=${{ steps.secrets.outputs.REDIS_CONNECTOR }} \
              --set-string config.redis.host=${{ steps.secrets.outputs.REDIS_HOST }} \
              --set-string config.redis.port=${{ steps.secrets.outputs.REDIS_PORT }} \
              --set-string config.redis.password=${{ steps.secrets.outputs.REDIS_PASSWORD }} \
              --set-string config.firebase.serviceAccountBase64=${{ steps.secrets.outputs.FIREBASE_SERVICE_ACCOUNT_BASE64 }} \
              --set-string config.firebase.storageBucket=${{ steps.secrets.outputs.FIREBASE_STORAGE_BUCKET }} \
              --set-string config.sentry.dsn=${{ steps.secrets.outputs.API_SENTRY_DSN }} \
              --set-string config.twitter.apiKey=${{ steps.secrets.outputs.TWITTER_API_KEY }} \
              --set-string config.coinMarketCap.apiKey=${{ steps.secrets.outputs.COIN_MARKET_CAP_API_KEY }} \
              --set ingress.enabled=true \
              --set-string ingress.annotations."kubernetes\.io/ingress\.class"=nginx \
              --set-string ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/proxy-body-size"="100m" \
              --set-string ingress.annotations."nginx\.org/client-max-body-size"="100m" \
              --set-string ingress.hosts[0].host=${{ steps.secrets.outputs.API_DNS }} \
              --set-string ingress.hosts[0].paths[0].path=/ \
              --set-string ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
              --set-string ingress.tls[0].secretName=myriad-api-tls \
              --set-string ingress.tls[0].hosts[0]=${{ steps.secrets.outputs.API_DNS }} \
              --set-string resources.requests.cpu=100m \
              --set-string resources.requests.memory=512Mi \
              --set-string resources.limits.cpu=300m \
              --set-string resources.limits.memory=780Mi \
              --set replicaCount=1 \
              --set autoscaling.enabled=true \
              --set autoscaling.minReplicas=1 \
              --set autoscaling.maxReplicas=1 \
              --set-string nodeSelector.pool=general
            kubectl rollout status deployment/myriad-api

  deploy-alpha-release:
    if: "startsWith(github.ref, 'refs/tags/') && github.event.release.prerelease && contains(needs.compute-build-info.outputs.latest_tag, 'alpha')"
    runs-on: ubuntu-20.04
    needs:
      - compute-build-info
    env:
      DEPLOY: ${{ secrets.STG_DEPLOY }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout code
        if: "${{ env.DEPLOY == 'true' }}"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Authenticate to Google Cloud
        if: "${{ env.DEPLOY == 'true' }}"
        id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: ${{ secrets.STG_GOOGLE_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.STG_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ secrets.STG_GCP_PROJECT_ID }}
      - name: Set up Cloud SDK
        if: "${{ env.DEPLOY == 'true' }}"
        uses: google-github-actions/setup-gcloud@v0
      - name: Get secrets
        if: "${{ env.DEPLOY == 'true' }}"
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            SSH_HOST:${{ secrets.STG_GCP_PROJECT_ID }}/SSH_HOST
            SSH_PORT:${{ secrets.STG_GCP_PROJECT_ID }}/SSH_PORT
            SSH_USERNAME:${{ secrets.STG_GCP_PROJECT_ID }}/SSH_USERNAME
            SSH_KEY:${{ secrets.STG_GCP_PROJECT_ID }}/SSH_KEY
            SERVER_ID:${{ secrets.STG_GCP_PROJECT_ID }}/SERVER_ID
            OFFICIAL_ACCOUNT_PUBLIC_KEY:${{ secrets.STG_GCP_PROJECT_ID }}/OFFICIAL_ACCOUNT_PUBLIC_KEY
            ADMIN_MNEMONIC:${{ secrets.STG_GCP_PROJECT_ID }}/ADMIN_MNEMONIC
            FAUCET_MNEMONIC:${{ secrets.STG_GCP_PROJECT_ID }}/FAUCET_MNEMONIC
            FAUCET_AMOUNT:${{ secrets.STG_GCP_PROJECT_ID }}/FAUCET_AMOUNT
            JWT_TOKEN_SECRET_KEY:${{ secrets.STG_GCP_PROJECT_ID }}/JWT_TOKEN_SECRET_KEY
            JWT_TOKEN_EXPIRES_IN:${{ secrets.STG_GCP_PROJECT_ID }}/JWT_TOKEN_EXPIRES_IN
            JWT_REFRESH_TOKEN_SECRET_KEY:${{ secrets.STG_GCP_PROJECT_ID }}/JWT_REFRESH_TOKEN_SECRET_KEY
            JWT_REFRESH_TOKEN_EXPIRES_IN:${{ secrets.STG_GCP_PROJECT_ID }}/JWT_REFRESH_TOKEN_EXPIRES_IN
            MONGO_PROTOCOL:${{ secrets.STG_GCP_PROJECT_ID }}/MONGO_PROTOCOL
            MONGO_HOST:${{ secrets.STG_GCP_PROJECT_ID }}/MONGO_HOST
            MONGO_PORT:${{ secrets.STG_GCP_PROJECT_ID }}/MONGO_PORT
            MONGO_USER_API:${{ secrets.STG_GCP_PROJECT_ID }}/MONGO_USER_API
            MONGO_PASSWORD_API:${{ secrets.STG_GCP_PROJECT_ID }}/MONGO_PASSWORD_API
            MONGO_DB:${{ secrets.STG_GCP_PROJECT_ID }}/MONGO_DB
            MONGO_URL:${{ secrets.STG_GCP_PROJECT_ID }}/MONGO_URL
            REDIS_CONNECTOR:${{ secrets.STG_GCP_PROJECT_ID }}/REDIS_CONNECTOR
            REDIS_HOST:${{ secrets.STG_GCP_PROJECT_ID }}/REDIS_HOST
            REDIS_PORT:${{ secrets.STG_GCP_PROJECT_ID }}/REDIS_PORT
            REDIS_PASSWORD:${{ secrets.STG_GCP_PROJECT_ID }}/REDIS_PASSWORD
            FIREBASE_SERVICE_ACCOUNT_BASE64:${{ secrets.STG_GCP_PROJECT_ID }}/FIREBASE_SERVICE_ACCOUNT_BASE64
            FIREBASE_STORAGE_BUCKET:${{ secrets.STG_GCP_PROJECT_ID }}/FIREBASE_STORAGE_BUCKET
            API_SENTRY_DSN:${{ secrets.STG_GCP_PROJECT_ID }}/API_SENTRY_DSN
            TWITTER_API_KEY:${{ secrets.STG_GCP_PROJECT_ID }}/TWITTER_API_KEY
            COIN_MARKET_CAP_API_KEY:${{ secrets.STG_GCP_PROJECT_ID }}/COIN_MARKET_CAP_API_KEY
      - name: Deploy
        if: "${{ env.DEPLOY == 'true' }}"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.secrets.outputs.SSH_HOST }}
          port: ${{ steps.secrets.outputs.SSH_PORT }}
          username: ${{ steps.secrets.outputs.SSH_USERNAME }}
          key: ${{ steps.secrets.outputs.SSH_KEY }}
          script: |
            ./connect.sh
            helm repo add myriadsocial https://charts.myriad.social
            helm repo update
            helm upgrade myriad-api myriadsocial/myriad-api \
              --install \
              --set-string image.tag=${{ needs.compute-build-info.outputs.latest_tag }} \
              --set-string config.serverId=${{ steps.secrets.outputs.SERVER_ID }} \
              --set-string config.officialAccountPublicKey=${{ steps.secrets.outputs.OFFICIAL_ACCOUNT_PUBLIC_KEY }} \
              --set-string config.adminMnemonic="${{ steps.secrets.outputs.ADMIN_MNEMONIC }}" \
              --set-string config.faucetMnemonic="${{ steps.secrets.outputs.FAUCET_MNEMONIC }}" \
              --set config.faucetAmount=${{ steps.secrets.outputs.FAUCET_AMOUNT }} \
              --set-string config.jwt.tokenSecretKey=${{ steps.secrets.outputs.JWT_TOKEN_SECRET_KEY }} \
              --set config.jwt.tokenExpireIn=${{ steps.secrets.outputs.JWT_TOKEN_EXPIRES_IN }} \
              --set-string config.jwt.refreshTokenSecretKey=${{ steps.secrets.outputs.JWT_REFRESH_TOKEN_SECRET_KEY }} \
              --set config.jwt.refreshTokenExpireIn=${{ steps.secrets.outputs.JWT_REFRESH_TOKEN_EXPIRES_IN }} \
              --set-string config.mongo.protocol=${{ steps.secrets.outputs.MONGO_PROTOCOL }} \
              --set-string config.mongo.host=${{ steps.secrets.outputs.MONGO_HOST }} \
              --set config.mongo.port=${{ steps.secrets.outputs.MONGO_PORT }} \
              --set-string config.mongo.user=${{ steps.secrets.outputs.MONGO_USER_API }} \
              --set-string config.mongo.password=${{ steps.secrets.outputs.MONGO_PASSWORD_API }} \
              --set-string config.mongo.database=${{ steps.secrets.outputs.MONGO_DB }} \
              --set-string config.mongo.url="${{ steps.secrets.outputs.MONGO_URL }}" \
              --set-string config.redis.connector=${{ steps.secrets.outputs.REDIS_CONNECTOR }} \
              --set-string config.redis.host=${{ steps.secrets.outputs.REDIS_HOST }} \
              --set-string config.redis.port=${{ steps.secrets.outputs.REDIS_PORT }} \
              --set-string config.redis.password=${{ steps.secrets.outputs.REDIS_PASSWORD }} \
              --set-string config.firebase.serviceAccountBase64=${{ steps.secrets.outputs.FIREBASE_SERVICE_ACCOUNT_BASE64 }} \
              --set-string config.firebase.storageBucket=${{ steps.secrets.outputs.FIREBASE_STORAGE_BUCKET }} \
              --set-string config.sentry.dsn=${{ steps.secrets.outputs.API_SENTRY_DSN }} \
              --set-string config.twitter.apiKey=${{ steps.secrets.outputs.TWITTER_API_KEY }} \
              --set-string config.coinMarketCap.apiKey=${{ steps.secrets.outputs.COIN_MARKET_CAP_API_KEY }} \
              --set-string resources.requests.cpu=100m \
              --set-string resources.requests.memory=512Mi \
              --set-string resources.limits.cpu=300m \
              --set-string resources.limits.memory=780Mi \
              --set replicaCount=1 \
              --set autoscaling.enabled=true \
              --set autoscaling.minReplicas=1 \
              --set autoscaling.maxReplicas=1 \
              --set-string nodeSelector.pool=general
            kubectl rollout status deployment/myriad-api

  deploy-beta-release:
    if: "startsWith(github.ref, 'refs/tags/') && github.event.release.prerelease && contains(needs.compute-build-info.outputs.latest_tag, 'beta')"
    runs-on: ubuntu-20.04
    needs:
      - compute-build-info
    env:
      DEPLOY: ${{ secrets.TESTNET_DEPLOY }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout code
        if: "${{ env.DEPLOY == 'true' }}"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Authenticate to Google Cloud
        if: "${{ env.DEPLOY == 'true' }}"
        id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: ${{ secrets.TESTNET_GOOGLE_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.TESTNET_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ secrets.TESTNET_GCP_PROJECT_ID }}
      - name: Set up Cloud SDK
        if: "${{ env.DEPLOY == 'true' }}"
        uses: google-github-actions/setup-gcloud@v0
      - name: Get secrets
        if: "${{ env.DEPLOY == 'true' }}"
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            SSH_HOST:${{ secrets.TESTNET_GCP_PROJECT_ID }}/SSH_HOST
            SSH_PORT:${{ secrets.TESTNET_GCP_PROJECT_ID }}/SSH_PORT
            SSH_USERNAME:${{ secrets.TESTNET_GCP_PROJECT_ID }}/SSH_USERNAME
            SSH_KEY:${{ secrets.TESTNET_GCP_PROJECT_ID }}/SSH_KEY
            SERVER_ID:${{ secrets.TESTNET_GCP_PROJECT_ID }}/SERVER_ID
            OFFICIAL_ACCOUNT_PUBLIC_KEY:${{ secrets.TESTNET_GCP_PROJECT_ID }}/OFFICIAL_ACCOUNT_PUBLIC_KEY
            ADMIN_MNEMONIC:${{ secrets.TESTNET_GCP_PROJECT_ID }}/ADMIN_MNEMONIC
            FAUCET_MNEMONIC:${{ secrets.TESTNET_GCP_PROJECT_ID }}/FAUCET_MNEMONIC
            FAUCET_AMOUNT:${{ secrets.TESTNET_GCP_PROJECT_ID }}/FAUCET_AMOUNT
            JWT_TOKEN_SECRET_KEY:${{ secrets.TESTNET_GCP_PROJECT_ID }}/JWT_TOKEN_SECRET_KEY
            JWT_TOKEN_EXPIRES_IN:${{ secrets.TESTNET_GCP_PROJECT_ID }}/JWT_TOKEN_EXPIRES_IN
            JWT_REFRESH_TOKEN_SECRET_KEY:${{ secrets.TESTNET_GCP_PROJECT_ID }}/JWT_REFRESH_TOKEN_SECRET_KEY
            JWT_REFRESH_TOKEN_EXPIRES_IN:${{ secrets.TESTNET_GCP_PROJECT_ID }}/JWT_REFRESH_TOKEN_EXPIRES_IN
            MONGO_PROTOCOL:${{ secrets.TESTNET_GCP_PROJECT_ID }}/MONGO_PROTOCOL
            MONGO_HOST:${{ secrets.TESTNET_GCP_PROJECT_ID }}/MONGO_HOST
            MONGO_PORT:${{ secrets.TESTNET_GCP_PROJECT_ID }}/MONGO_PORT
            MONGO_USER_API:${{ secrets.TESTNET_GCP_PROJECT_ID }}/MONGO_USER_API
            MONGO_PASSWORD_API:${{ secrets.TESTNET_GCP_PROJECT_ID }}/MONGO_PASSWORD_API
            MONGO_DB:${{ secrets.TESTNET_GCP_PROJECT_ID }}/MONGO_DB
            MONGO_URL:${{ secrets.TESTNET_GCP_PROJECT_ID }}/MONGO_URL
            REDIS_CONNECTOR:${{ secrets.TESTNET_GCP_PROJECT_ID }}/REDIS_CONNECTOR
            REDIS_HOST:${{ secrets.TESTNET_GCP_PROJECT_ID }}/REDIS_HOST
            REDIS_PORT:${{ secrets.TESTNET_GCP_PROJECT_ID }}/REDIS_PORT
            REDIS_PASSWORD:${{ secrets.TESTNET_GCP_PROJECT_ID }}/REDIS_PASSWORD
            FIREBASE_SERVICE_ACCOUNT_BASE64:${{ secrets.TESTNET_GCP_PROJECT_ID }}/FIREBASE_SERVICE_ACCOUNT_BASE64
            FIREBASE_STORAGE_BUCKET:${{ secrets.TESTNET_GCP_PROJECT_ID }}/FIREBASE_STORAGE_BUCKET
            API_SENTRY_DSN:${{ secrets.TESTNET_GCP_PROJECT_ID }}/API_SENTRY_DSN
            TWITTER_API_KEY:${{ secrets.TESTNET_GCP_PROJECT_ID }}/TWITTER_API_KEY
            COIN_MARKET_CAP_API_KEY:${{ secrets.TESTNET_GCP_PROJECT_ID }}/COIN_MARKET_CAP_API_KEY
      - name: Deploy
        if: "${{ env.DEPLOY == 'true' }}"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.secrets.outputs.SSH_HOST }}
          port: ${{ steps.secrets.outputs.SSH_PORT }}
          username: ${{ steps.secrets.outputs.SSH_USERNAME }}
          key: ${{ steps.secrets.outputs.SSH_KEY }}
          script: |
            ./connect.sh
            helm repo add myriadsocial https://charts.myriad.social
            helm repo update
            helm upgrade myriad-api myriadsocial/myriad-api \
              --install \
              --set-string image.tag=${{ needs.compute-build-info.outputs.latest_tag }} \
              --set-string config.serverId=${{ steps.secrets.outputs.SERVER_ID }} \
              --set-string config.officialAccountPublicKey=${{ steps.secrets.outputs.OFFICIAL_ACCOUNT_PUBLIC_KEY }} \
              --set-string config.adminMnemonic="${{ steps.secrets.outputs.ADMIN_MNEMONIC }}" \
              --set-string config.faucetMnemonic="${{ steps.secrets.outputs.FAUCET_MNEMONIC }}" \
              --set config.faucetAmount=${{ steps.secrets.outputs.FAUCET_AMOUNT }} \
              --set-string config.jwt.tokenSecretKey=${{ steps.secrets.outputs.JWT_TOKEN_SECRET_KEY }} \
              --set config.jwt.tokenExpireIn=${{ steps.secrets.outputs.JWT_TOKEN_EXPIRES_IN }} \
              --set-string config.jwt.refreshTokenSecretKey=${{ steps.secrets.outputs.JWT_REFRESH_TOKEN_SECRET_KEY }} \
              --set config.jwt.refreshTokenExpireIn=${{ steps.secrets.outputs.JWT_REFRESH_TOKEN_EXPIRES_IN }} \
              --set-string config.mongo.protocol=${{ steps.secrets.outputs.MONGO_PROTOCOL }} \
              --set-string config.mongo.host=${{ steps.secrets.outputs.MONGO_HOST }} \
              --set config.mongo.port=${{ steps.secrets.outputs.MONGO_PORT }} \
              --set-string config.mongo.user=${{ steps.secrets.outputs.MONGO_USER_API }} \
              --set-string config.mongo.password=${{ steps.secrets.outputs.MONGO_PASSWORD_API }} \
              --set-string config.mongo.database=${{ steps.secrets.outputs.MONGO_DB }} \
              --set-string config.mongo.url="${{ steps.secrets.outputs.MONGO_URL }}" \
              --set-string config.redis.connector=${{ steps.secrets.outputs.REDIS_CONNECTOR }} \
              --set-string config.redis.host=${{ steps.secrets.outputs.REDIS_HOST }} \
              --set-string config.redis.port=${{ steps.secrets.outputs.REDIS_PORT }} \
              --set-string config.redis.password=${{ steps.secrets.outputs.REDIS_PASSWORD }} \
              --set-string config.firebase.serviceAccountBase64=${{ steps.secrets.outputs.FIREBASE_SERVICE_ACCOUNT_BASE64 }} \
              --set-string config.firebase.storageBucket=${{ steps.secrets.outputs.FIREBASE_STORAGE_BUCKET }} \
              --set-string config.sentry.dsn=${{ steps.secrets.outputs.API_SENTRY_DSN }} \
              --set-string config.twitter.apiKey=${{ steps.secrets.outputs.TWITTER_API_KEY }} \
              --set-string config.coinMarketCap.apiKey=${{ steps.secrets.outputs.COIN_MARKET_CAP_API_KEY }} \
              --set-string resources.requests.cpu=300m \
              --set-string resources.requests.memory=512Mi \
              --set-string resources.limits.cpu=500m \
              --set-string resources.limits.memory=1024Mi \
              --set replicaCount=1\
              --set autoscaling.enabled=true \
              --set autoscaling.minReplicas=1 \
              --set autoscaling.maxReplicas=100 \
              --set-string nodeSelector.pool=general
            kubectl rollout status deployment/myriad-api

  deploy-pre-release:
    if: "startsWith(github.ref, 'refs/tags/') && github.event.release.prerelease && contains(needs.compute-build-info.outputs.latest_tag, 'rc')"
    runs-on: ubuntu-20.04
    needs:
      - compute-build-info
    env:
      DEPLOY: ${{ secrets.MAINNET_DEPLOY }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout code
        if: "${{ env.DEPLOY == 'true' }}"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Authenticate to Google Cloud
        if: "${{ env.DEPLOY == 'true' }}"
        id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: ${{ secrets.MAINNET_GOOGLE_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.MAINNET_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ secrets.MAINNET_GCP_PROJECT_ID }}
      - name: Set up Cloud SDK
        if: "${{ env.DEPLOY == 'true' }}"
        uses: google-github-actions/setup-gcloud@v0
      - name: Get secrets
        if: "${{ env.DEPLOY == 'true' }}"
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            SSH_HOST:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_HOST
            SSH_PORT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_PORT
            SSH_USERNAME:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_USERNAME
            SSH_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_KEY
            SERVER_ID:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SERVER_ID
            OFFICIAL_ACCOUNT_PUBLIC_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/OFFICIAL_ACCOUNT_PUBLIC_KEY
            ADMIN_MNEMONIC:${{ secrets.MAINNET_GCP_PROJECT_ID }}/ADMIN_MNEMONIC
            FAUCET_MNEMONIC:${{ secrets.MAINNET_GCP_PROJECT_ID }}/FAUCET_MNEMONIC
            FAUCET_AMOUNT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/FAUCET_AMOUNT
            JWT_TOKEN_SECRET_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/JWT_TOKEN_SECRET_KEY
            JWT_TOKEN_EXPIRES_IN:${{ secrets.MAINNET_GCP_PROJECT_ID }}/JWT_TOKEN_EXPIRES_IN
            JWT_REFRESH_TOKEN_SECRET_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/JWT_REFRESH_TOKEN_SECRET_KEY
            JWT_REFRESH_TOKEN_EXPIRES_IN:${{ secrets.MAINNET_GCP_PROJECT_ID }}/JWT_REFRESH_TOKEN_EXPIRES_IN
            MONGO_PROTOCOL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/MONGO_PROTOCOL
            MONGO_HOST:${{ secrets.MAINNET_GCP_PROJECT_ID }}/MONGO_HOST
            MONGO_PORT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/MONGO_PORT
            MONGO_USER_API:${{ secrets.MAINNET_GCP_PROJECT_ID }}/MONGO_USER_API
            MONGO_PASSWORD_API:${{ secrets.MAINNET_GCP_PROJECT_ID }}/MONGO_PASSWORD_API
            MONGO_DB:${{ secrets.MAINNET_GCP_PROJECT_ID }}/MONGO_DB
            MONGO_URL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/MONGO_URL
            REDIS_CONNECTOR:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_CONNECTOR
            REDIS_HOST:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_HOST
            REDIS_PORT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_PORT
            REDIS_PASSWORD:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_PASSWORD
            FIREBASE_SERVICE_ACCOUNT_BASE64:${{ secrets.MAINNET_GCP_PROJECT_ID }}/FIREBASE_SERVICE_ACCOUNT_BASE64
            FIREBASE_STORAGE_BUCKET:${{ secrets.MAINNET_GCP_PROJECT_ID }}/FIREBASE_STORAGE_BUCKET
            API_SENTRY_DSN:${{ secrets.MAINNET_GCP_PROJECT_ID }}/API_SENTRY_DSN
            TWITTER_API_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/TWITTER_API_KEY
            COIN_MARKET_CAP_API_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/COIN_MARKET_CAP_API_KEY
      - name: Deploy
        if: "${{ env.DEPLOY == 'true' }}"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.secrets.outputs.SSH_HOST }}
          port: ${{ steps.secrets.outputs.SSH_PORT }}
          username: ${{ steps.secrets.outputs.SSH_USERNAME }}
          key: ${{ steps.secrets.outputs.SSH_KEY }}
          script: |
            ./connect.sh
            helm repo add myriadsocial https://charts.myriad.social
            helm repo update
            helm upgrade myriad-api myriadsocial/myriad-api \
              --install \
              --set-string image.tag=${{ needs.compute-build-info.outputs.latest_tag }} \
              --set-string config.serverId=${{ steps.secrets.outputs.SERVER_ID }} \
              --set-string config.officialAccountPublicKey=${{ steps.secrets.outputs.OFFICIAL_ACCOUNT_PUBLIC_KEY }} \
              --set-string config.adminMnemonic="${{ steps.secrets.outputs.ADMIN_MNEMONIC }}" \
              --set-string config.faucetMnemonic="${{ steps.secrets.outputs.FAUCET_MNEMONIC }}" \
              --set config.faucetAmount=${{ steps.secrets.outputs.FAUCET_AMOUNT }} \
              --set-string config.jwt.tokenSecretKey=${{ steps.secrets.outputs.JWT_TOKEN_SECRET_KEY }} \
              --set config.jwt.tokenExpireIn=${{ steps.secrets.outputs.JWT_TOKEN_EXPIRES_IN }} \
              --set-string config.jwt.refreshTokenSecretKey=${{ steps.secrets.outputs.JWT_REFRESH_TOKEN_SECRET_KEY }} \
              --set config.jwt.refreshTokenExpireIn=${{ steps.secrets.outputs.JWT_REFRESH_TOKEN_EXPIRES_IN }} \
              --set-string config.mongo.protocol=${{ steps.secrets.outputs.MONGO_PROTOCOL }} \
              --set-string config.mongo.host=${{ steps.secrets.outputs.MONGO_HOST }} \
              --set config.mongo.port=${{ steps.secrets.outputs.MONGO_PORT }} \
              --set-string config.mongo.user=${{ steps.secrets.outputs.MONGO_USER_API }} \
              --set-string config.mongo.password=${{ steps.secrets.outputs.MONGO_PASSWORD_API }} \
              --set-string config.mongo.database=${{ steps.secrets.outputs.MONGO_DB }} \
              --set-string config.mongo.url="${{ steps.secrets.outputs.MONGO_URL }}" \
              --set-string config.redis.connector=${{ steps.secrets.outputs.REDIS_CONNECTOR }} \
              --set-string config.redis.host=${{ steps.secrets.outputs.REDIS_HOST }} \
              --set-string config.redis.port=${{ steps.secrets.outputs.REDIS_PORT }} \
              --set-string config.redis.password=${{ steps.secrets.outputs.REDIS_PASSWORD }} \
              --set-string config.firebase.serviceAccountBase64=${{ steps.secrets.outputs.FIREBASE_SERVICE_ACCOUNT_BASE64 }} \
              --set-string config.firebase.storageBucket=${{ steps.secrets.outputs.FIREBASE_STORAGE_BUCKET }} \
              --set-string config.sentry.dsn=${{ steps.secrets.outputs.API_SENTRY_DSN }} \
              --set-string config.twitter.apiKey=${{ steps.secrets.outputs.TWITTER_API_KEY }} \
              --set-string config.coinMarketCap.apiKey=${{ steps.secrets.outputs.COIN_MARKET_CAP_API_KEY }} \
              --set-string resources.requests.cpu=300m \
              --set-string resources.requests.memory=512Mi \
              --set-string resources.limits.cpu=500m \
              --set-string resources.limits.memory=1024Mi \
              --set replicaCount=1 \
              --set autoscaling.enabled=true \
              --set autoscaling.minReplicas=1 \
              --set autoscaling.maxReplicas=100 \
              --set-string nodeSelector.pool=general
            kubectl rollout status deployment/myriad-api

  deploy-release:
    if: "startsWith(github.ref, 'refs/tags/') && !github.event.release.prerelease"
    runs-on: ubuntu-20.04
    needs:
      - compute-build-info
    env:
      DEPLOY: ${{ secrets.MAINNET_DEPLOY }}
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout code
        if: "${{ env.DEPLOY == 'true' }}"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Authenticate to Google Cloud
        if: "${{ env.DEPLOY == 'true' }}"
        id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: ${{ secrets.MAINNET_GOOGLE_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.MAINNET_SERVICE_ACCOUNT_EMAIL }}
          project_id: ${{ secrets.MAINNET_GCP_PROJECT_ID }}
      - name: Set up Cloud SDK
        if: "${{ env.DEPLOY == 'true' }}"
        uses: google-github-actions/setup-gcloud@v0
      - name: Get secrets
        if: "${{ env.DEPLOY == 'true' }}"
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            SSH_HOST:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_HOST
            SSH_PORT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_PORT
            SSH_USERNAME:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_USERNAME
            SSH_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SSH_KEY
            SERVER_ID:${{ secrets.MAINNET_GCP_PROJECT_ID }}/SERVER_ID
            OFFICIAL_ACCOUNT_PUBLIC_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/OFFICIAL_ACCOUNT_PUBLIC_KEY
            ADMIN_MNEMONIC:${{ secrets.MAINNET_GCP_PROJECT_ID }}/ADMIN_MNEMONIC
            FAUCET_MNEMONIC:${{ secrets.MAINNET_GCP_PROJECT_ID }}/FAUCET_MNEMONIC
            FAUCET_AMOUNT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/FAUCET_AMOUNT
            JWT_TOKEN_SECRET_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/JWT_TOKEN_SECRET_KEY
            JWT_TOKEN_EXPIRES_IN:${{ secrets.MAINNET_GCP_PROJECT_ID }}/JWT_TOKEN_EXPIRES_IN
            JWT_REFRESH_TOKEN_SECRET_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/JWT_REFRESH_TOKEN_SECRET_KEY
            JWT_REFRESH_TOKEN_EXPIRES_IN:${{ secrets.MAINNET_GCP_PROJECT_ID }}/JWT_REFRESH_TOKEN_EXPIRES_IN
            MONGO_PROTOCOL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/MONGO_PROTOCOL
            MONGO_HOST:${{ secrets.MAINNET_GCP_PROJECT_ID }}/MONGO_HOST
            MONGO_PORT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/MONGO_PORT
            MONGO_USER_API:${{ secrets.MAINNET_GCP_PROJECT_ID }}/MONGO_USER_API
            MONGO_PASSWORD_API:${{ secrets.MAINNET_GCP_PROJECT_ID }}/MONGO_PASSWORD_API
            MONGO_DB:${{ secrets.MAINNET_GCP_PROJECT_ID }}/MONGO_DB
            MONGO_URL:${{ secrets.MAINNET_GCP_PROJECT_ID }}/MONGO_URL
            REDIS_CONNECTOR:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_CONNECTOR
            REDIS_HOST:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_HOST
            REDIS_PORT:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_PORT
            REDIS_PASSWORD:${{ secrets.MAINNET_GCP_PROJECT_ID }}/REDIS_PASSWORD
            FIREBASE_SERVICE_ACCOUNT_BASE64:${{ secrets.MAINNET_GCP_PROJECT_ID }}/FIREBASE_SERVICE_ACCOUNT_BASE64
            FIREBASE_STORAGE_BUCKET:${{ secrets.MAINNET_GCP_PROJECT_ID }}/FIREBASE_STORAGE_BUCKET
            API_SENTRY_DSN:${{ secrets.MAINNET_GCP_PROJECT_ID }}/API_SENTRY_DSN
            TWITTER_API_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/TWITTER_API_KEY
            COIN_MARKET_CAP_API_KEY:${{ secrets.MAINNET_GCP_PROJECT_ID }}/COIN_MARKET_CAP_API_KEY
      - name: Deploy
        if: "${{ env.DEPLOY == 'true' }}"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.secrets.outputs.SSH_HOST }}
          port: ${{ steps.secrets.outputs.SSH_PORT }}
          username: ${{ steps.secrets.outputs.SSH_USERNAME }}
          key: ${{ steps.secrets.outputs.SSH_KEY }}
          script: |
            ./connect.sh
            helm repo add myriadsocial https://charts.myriad.social
            helm repo update
            helm upgrade myriad-api myriadsocial/myriad-api \
              --install \
              --set-string image.tag=${{ needs.compute-build-info.outputs.latest_tag }} \
              --set-string config.serverId=${{ steps.secrets.outputs.SERVER_ID }} \
              --set-string config.officialAccountPublicKey=${{ steps.secrets.outputs.OFFICIAL_ACCOUNT_PUBLIC_KEY }} \
              --set-string config.adminMnemonic="${{ steps.secrets.outputs.ADMIN_MNEMONIC }}" \
              --set-string config.faucetMnemonic="${{ steps.secrets.outputs.FAUCET_MNEMONIC }}" \
              --set config.faucetAmount=${{ steps.secrets.outputs.FAUCET_AMOUNT }} \
              --set-string config.jwt.tokenSecretKey=${{ steps.secrets.outputs.JWT_TOKEN_SECRET_KEY }} \
              --set config.jwt.tokenExpireIn=${{ steps.secrets.outputs.JWT_TOKEN_EXPIRES_IN }} \
              --set-string config.jwt.refreshTokenSecretKey=${{ steps.secrets.outputs.JWT_REFRESH_TOKEN_SECRET_KEY }} \
              --set config.jwt.refreshTokenExpireIn=${{ steps.secrets.outputs.JWT_REFRESH_TOKEN_EXPIRES_IN }} \
              --set-string config.mongo.protocol=${{ steps.secrets.outputs.MONGO_PROTOCOL }} \
              --set-string config.mongo.host=${{ steps.secrets.outputs.MONGO_HOST }} \
              --set config.mongo.port=${{ steps.secrets.outputs.MONGO_PORT }} \
              --set-string config.mongo.user=${{ steps.secrets.outputs.MONGO_USER_API }} \
              --set-string config.mongo.password=${{ steps.secrets.outputs.MONGO_PASSWORD_API }} \
              --set-string config.mongo.database=${{ steps.secrets.outputs.MONGO_DB }} \
              --set-string config.mongo.url="${{ steps.secrets.outputs.MONGO_URL }}" \
              --set-string config.redis.connector=${{ steps.secrets.outputs.REDIS_CONNECTOR }} \
              --set-string config.redis.host=${{ steps.secrets.outputs.REDIS_HOST }} \
              --set-string config.redis.port=${{ steps.secrets.outputs.REDIS_PORT }} \
              --set-string config.redis.password=${{ steps.secrets.outputs.REDIS_PASSWORD }} \
              --set-string config.firebase.serviceAccountBase64=${{ steps.secrets.outputs.FIREBASE_SERVICE_ACCOUNT_BASE64 }} \
              --set-string config.firebase.storageBucket=${{ steps.secrets.outputs.FIREBASE_STORAGE_BUCKET }} \
              --set-string config.sentry.dsn=${{ steps.secrets.outputs.API_SENTRY_DSN }} \
              --set-string config.twitter.apiKey=${{ steps.secrets.outputs.TWITTER_API_KEY }} \
              --set-string config.coinMarketCap.apiKey=${{ steps.secrets.outputs.COIN_MARKET_CAP_API_KEY }} \
              --set-string resources.requests.cpu=300m \
              --set-string resources.requests.memory=512Mi \
              --set-string resources.limits.cpu=500m \
              --set-string resources.limits.memory=1024Mi \
              --set replicaCount=1 \
              --set autoscaling.enabled=true \
              --set autoscaling.minReplicas=1 \
              --set autoscaling.maxReplicas=100 \
              --set-string nodeSelector.pool=general
            kubectl rollout status deployment/myriad-api
