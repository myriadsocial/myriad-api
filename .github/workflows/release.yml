name: Release automation

on:
  release:
    types: [published]

concurrency:
  group: release-automation

jobs:
  compute-build-info:
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.build-info.outputs.latest_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Compute build info
        id: build-info
        shell: bash
        run: |
          version=${GITHUB_REF#refs/*/}
          echo $version
          echo "::set-output name=latest_tag::$version"

  build-and-publish-docker-image:
    runs-on: ubuntu-latest
    needs: compute-build-info
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-release
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push pre-release
        if: "github.event.release.prerelease && !contains(needs.compute-build-info.outputs.latest_tag, 'alpha') && !contains(needs.compute-build-info.outputs.latest_tag, 'beta')"
        uses: docker/build-push-action@v2
        with:
          push: true
          file: .maintain/docker/Dockerfile
          tags: |
            ${{ github.repository }}:${{ github.event.release.latest_tag }}
            ${{ github.repository }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      - name: Build and push release
        if: "!github.event.release.prerelease"
        uses: docker/build-push-action@v2
        with:
          push: true
          file: .maintain/docker/Dockerfile
          tags: |
            ${{ github.repository }}:${{ github.event.release.latest_tag }}
            ${{ github.repository }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  deploy-pre-release:
    runs-on: ubuntu-latest
    needs: [compute-build-info, build-and-publish-docker-image]
    env:
      DEPLOY: ${{ secrets.PROD_DEPLOY }}
    if: "github.event.release.prerelease && !contains(needs.compute-build-info.outputs.latest_tag, 'alpha') && !contains(needs.compute-build-info.outputs.latest_tag, 'beta')"
    steps:
      - name: Checkout code
        if: "${{ env.DEPLOY == 'true' }}"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Cloud SDK
        if: "${{ env.DEPLOY == 'true' }}"
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.PROD_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.PROD_GCP_SA_KEY }}
          export_default_credentials: true
      - name: Get secrets
        if: "${{ env.DEPLOY == 'true' }}"
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            RPC_WS_URL:${{ secrets.PROD_GCP_PROJECT_ID }}/RPC_WS_URL
            FAUCET_MNEMONIC:${{ secrets.PROD_GCP_PROJECT_ID }}/FAUCET_MNEMONIC
            REWARD_AMOUNT:${{ secrets.PROD_GCP_PROJECT_ID }}/REWARD_AMOUNT
            REWARD_AMOUNT_ACALA_AUSD:${{ secrets.PROD_GCP_PROJECT_ID }}/REWARD_AMOUNT_ACALA_AUSD
            MONGO_HOST:${{ secrets.PROD_GCP_PROJECT_ID }}/MONGO_HOST
            MONGO_PORT:${{ secrets.PROD_GCP_PROJECT_ID }}/MONGO_PORT
            MONGO_DB:${{ secrets.PROD_GCP_PROJECT_ID }}/MONGO_DB
            MONGO_USER_API:${{ secrets.PROD_GCP_PROJECT_ID }}/MONGO_USER_API
            MONGO_PASSWORD_API:${{ secrets.PROD_GCP_PROJECT_ID }}/MONGO_PASSWORD_API
            FIREBASE_SERVICE_ACCOUNT_BASE64:${{ secrets.PROD_GCP_PROJECT_ID }}/FIREBASE_SERVICE_ACCOUNT_BASE64
            API_SENTRY_DNS:${{ secrets.PROD_GCP_PROJECT_ID }}/API_SENTRY_DNS
            TWITTER_BEARER_TOKEN:${{ secrets.PROD_GCP_PROJECT_ID }}/TWITTER_BEARER_TOKEN
            COIN_MARKET_CAP_API_KEY:${{ secrets.PROD_GCP_PROJECT_ID }}/COIN_MARKET_CAP_API_KEY
            SSH_HOST:${{ secrets.PROD_GCP_PROJECT_ID }}/SSH_HOST
            SSH_USERNAME:${{ secrets.PROD_GCP_PROJECT_ID }}/SSH_USERNAME
            SSH_KEY:${{ secrets.PROD_GCP_PROJECT_ID }}/SSH_KEY
            SSH_PORT:${{ secrets.PROD_GCP_PROJECT_ID }}/SSH_PORT
      - name: Deploy
        if: "${{ env.DEPLOY == 'true' }}"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.secrets.outputs.SSH_HOST }}
          username: ${{ steps.secrets.outputs.SSH_USERNAME }}
          key: ${{ steps.secrets.outputs.SSH_KEY }}
          port: ${{ steps.secrets.outputs.SSH_PORT }}
          script: |
            ./connect.sh
            helm repo add myriad https://charts.myriad.systems
            helm repo update
            helm upgrade myriad-api myriad/myriad-api \
              --install \
              --set-string image.tag=${{ github.event.release.latest_tag }} \
              --set-string config.rpcWSURL=${{ steps.secrets.outputs.RPC_WS_URL }} \
              --set-string config.faucetMnemonic="${{ steps.secrets.outputs.FAUCET_MNEMONIC }}" \
              --set config.rewardAmount=${{ steps.secrets.outputs.REWARD_AMOUNT }} \
              --set config.acalaAUSDRewardAmount=${{ steps.secrets.outputs.REWARD_AMOUNT_ACALA_AUSD }} \
              --set-string config.mongo.host=${{ steps.secrets.outputs.MONGO_HOST }} \
              --set config.mongo.port=${{ steps.secrets.outputs.MONGO_PORT }} \
              --set-string config.mongo.database=${{ steps.secrets.outputs.MONGO_DB }} \
              --set-string config.mongo.user=${{ steps.secrets.outputs.MONGO_USER_API }} \
              --set-string config.mongo.password=${{ steps.secrets.outputs.MONGO_PASSWORD_API }} \
              --set-string config.firebase.serviceAccountBase64=${{ steps.secrets.outputs.FIREBASE_SERVICE_ACCOUNT_BASE64 }} \
              --set-string config.sentry.dns=${{ steps.secrets.outputs.API_SENTRY_DNS }} \
              --set-string config.twitter.bearerToken=${{ steps.secrets.outputs.TWITTER_BEARER_TOKEN }} \
              --set-string config.coinMarketCap.apiKey=${{ steps.secrets.outputs.COIN_MARKET_CAP_API_KEY }} \
              --set ingress.enabled=true \
              --set-string ingress.annotations."kubernetes\.io/ingress\.class"=nginx \
              --set-string ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/limit-rps"="10" \
              --set-string ingress.hosts[0].host=api.myriad.systems \
              --set-string ingress.hosts[0].paths[0].path=/ \
              --set-string ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
              --set-string ingress.tls[0].secretName=myriad-api-tls \
              --set-string ingress.tls[0].hosts[0]=api.myriad.systems \
              --set autoscaling.enabled=true
            kubectl rollout status deployment/myriad-api

  deploy-release:
    if: "!github.event.release.prerelease"
    runs-on: ubuntu-latest
    needs: [compute-build-info, build-and-publish-docker-image]
    env:
      DEPLOY: ${{ secrets.PROD_DEPLOY }}
    steps:
      - name: Checkout code
        if: "${{ env.DEPLOY == 'true' }}"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up Cloud SDK
        if: "${{ env.DEPLOY == 'true' }}"
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.PROD_GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.PROD_GCP_SA_KEY }}
          export_default_credentials: true
      - name: Get secrets
        if: "${{ env.DEPLOY == 'true' }}"
        id: secrets
        uses: google-github-actions/get-secretmanager-secrets@main
        with:
          secrets: |-
            RPC_WS_URL:${{ secrets.PROD_GCP_PROJECT_ID }}/RPC_WS_URL
            FAUCET_MNEMONIC:${{ secrets.PROD_GCP_PROJECT_ID }}/FAUCET_MNEMONIC
            REWARD_AMOUNT:${{ secrets.PROD_GCP_PROJECT_ID }}/REWARD_AMOUNT
            REWARD_AMOUNT_ACALA_AUSD:${{ secrets.PROD_GCP_PROJECT_ID }}/REWARD_AMOUNT_ACALA_AUSD
            MONGO_HOST:${{ secrets.PROD_GCP_PROJECT_ID }}/MONGO_HOST
            MONGO_PORT:${{ secrets.PROD_GCP_PROJECT_ID }}/MONGO_PORT
            MONGO_DB:${{ secrets.PROD_GCP_PROJECT_ID }}/MONGO_DB
            MONGO_USER_API:${{ secrets.PROD_GCP_PROJECT_ID }}/MONGO_USER_API
            MONGO_PASSWORD_API:${{ secrets.PROD_GCP_PROJECT_ID }}/MONGO_PASSWORD_API
            FIREBASE_SERVICE_ACCOUNT_BASE64:${{ secrets.PROD_GCP_PROJECT_ID }}/FIREBASE_SERVICE_ACCOUNT_BASE64
            API_SENTRY_DNS:${{ secrets.PROD_GCP_PROJECT_ID }}/API_SENTRY_DNS
            TWITTER_BEARER_TOKEN:${{ secrets.PROD_GCP_PROJECT_ID }}/TWITTER_BEARER_TOKEN
            COIN_MARKET_CAP_API_KEY:${{ secrets.PROD_GCP_PROJECT_ID }}/COIN_MARKET_CAP_API_KEY
            SSH_HOST:${{ secrets.PROD_GCP_PROJECT_ID }}/SSH_HOST
            SSH_USERNAME:${{ secrets.PROD_GCP_PROJECT_ID }}/SSH_USERNAME
            SSH_KEY:${{ secrets.PROD_GCP_PROJECT_ID }}/SSH_KEY
            SSH_PORT:${{ secrets.PROD_GCP_PROJECT_ID }}/SSH_PORT
      - name: Deploy
        if: "${{ env.DEPLOY == 'true' }}"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.secrets.outputs.SSH_HOST }}
          username: ${{ steps.secrets.outputs.SSH_USERNAME }}
          key: ${{ steps.secrets.outputs.SSH_KEY }}
          port: ${{ steps.secrets.outputs.SSH_PORT }}
          script: |
            ./connect.sh
            helm repo add myriad https://charts.myriad.systems
            helm repo update
            helm upgrade myriad-api myriad/myriad-api \
              --install \
              --set-string image.tag=${{ github.event.release.latest_tag }} \
              --set-string config.rpcWSURL=${{ steps.secrets.outputs.RPC_WS_URL }} \
              --set-string config.faucetMnemonic="${{ steps.secrets.outputs.FAUCET_MNEMONIC }}" \
              --set config.rewardAmount=${{ steps.secrets.outputs.REWARD_AMOUNT }} \
              --set config.acalaAUSDRewardAmount=${{ steps.secrets.outputs.REWARD_AMOUNT_ACALA_AUSD }} \
              --set-string config.mongo.host=${{ steps.secrets.outputs.MONGO_HOST }} \
              --set config.mongo.port=${{ steps.secrets.outputs.MONGO_PORT }} \
              --set-string config.mongo.database=${{ steps.secrets.outputs.MONGO_DB }} \
              --set-string config.mongo.user=${{ steps.secrets.outputs.MONGO_USER_API }} \
              --set-string config.mongo.password=${{ steps.secrets.outputs.MONGO_PASSWORD_API }} \
              --set-string config.firebase.serviceAccountBase64=${{ steps.secrets.outputs.FIREBASE_SERVICE_ACCOUNT_BASE64 }} \
              --set-string config.sentry.dns=${{ steps.secrets.outputs.API_SENTRY_DNS }} \
              --set-string config.twitter.bearerToken=${{ steps.secrets.outputs.TWITTER_BEARER_TOKEN }} \
              --set-string config.coinMarketCap.apiKey=${{ steps.secrets.outputs.COIN_MARKET_CAP_API_KEY }} \
              --set ingress.enabled=true \
              --set-string ingress.annotations."kubernetes\.io/ingress\.class"=nginx \
              --set-string ingress.annotations."cert-manager\.io/cluster-issuer"=letsencrypt \
              --set-string ingress.annotations."nginx\.ingress\.kubernetes\.io/limit-rps"="10" \
              --set-string ingress.hosts[0].host=api.myriad.systems \
              --set-string ingress.hosts[0].paths[0].path=/ \
              --set-string ingress.hosts[0].paths[0].pathType=ImplementationSpecific \
              --set-string ingress.tls[0].secretName=myriad-api-tls \
              --set-string ingress.tls[0].hosts[0]=api.myriad.systems \
              --set autoscaling.enabled=true
            kubectl rollout status deployment/myriad-api
